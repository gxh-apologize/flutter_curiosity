package flutter.curiosity.utilsimport android.content.pm.PackageInfoimport android.os.Buildimport android.os.Environmentimport flutter.curiosity.CuriosityPlugin.Companion.contextimport java.util.*object AppInfo {    fun getAppInfo(): Map<String, Any> {        val appInfo = context.packageManager        val info = appInfo.getPackageInfo(context.packageName, 0)        val map: MutableMap<String, Any> = HashMap()        val filesDir = context.filesDir.path        val cacheDir = context.cacheDir.path        if (Environment.MEDIA_MOUNTED == Environment.getExternalStorageState() || !Environment.isExternalStorageRemovable()) {            map["externalCacheDir"] = context.externalCacheDir?.path.toString()            map["externalFilesDir"] = context.getExternalFilesDir(null)?.path.toString()            map["externalStorageDirectory"] = getExternalDirectory(null)            map["DIRECTORY_DCIM"] = getExternalDirectory(Environment.DIRECTORY_DCIM)            map["DIRECTORY_DOWNLOADS"] = getExternalDirectory(Environment.DIRECTORY_DOWNLOADS)            map["DIRECTORY_MOVIES"] = getExternalDirectory(Environment.DIRECTORY_MOVIES)            map["DIRECTORY_MUSIC"] = getExternalDirectory(Environment.DIRECTORY_MUSIC)            map["DIRECTORY_PICTURES"] = getExternalDirectory(Environment.DIRECTORY_PICTURES)            map["DIRECTORY_ALARMS"] = getExternalDirectory(Environment.DIRECTORY_ALARMS)            map["DIRECTORY_DOCUMENTS"] = getExternalDirectory(Environment.DIRECTORY_DOCUMENTS)            map["DIRECTORY_NOTIFICATIONS"] = getExternalDirectory(Environment.DIRECTORY_NOTIFICATIONS)            map["DIRECTORY_RINGTONES"] = getExternalDirectory(Environment.DIRECTORY_RINGTONES)            map["DIRECTORY_PODCASTS"] = getExternalDirectory(Environment.DIRECTORY_PODCASTS)        } else {            map["externalFilesDir"] = filesDir            map["externalCacheDir"] = cacheDir        }        map["filesDir"] = filesDir        map["cacheDir"] = cacheDir        map["phoneModel"] = Build.MODEL        map["phoneBrand"] = Build.BRAND        map["systemVersion"] = Build.VERSION.RELEASE        map["sdkVersion"] = Build.VERSION.SDK_INT        map["appName"] = info.applicationInfo.loadLabel(appInfo).toString()        map["packageName"] = info.packageName        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {            map["versionCode"] = info.longVersionCode        } else {            map["versionCode"] = info.versionCode        }        map["versionName"] = info.versionName        map["buildNumber"] = getLongVersionCode(info)        map["firstInstallTime"] = info.firstInstallTime        map["lastUpdateTime"] = info.lastUpdateTime        map["statusBarHeight"] = NativeUtils.getBarHeight("status_bar_height")        map["navigationBarHeight"] = NativeUtils.getBarHeight("navigation_bar_height")        return map    }    private fun getLongVersionCode(info: PackageInfo): Long {        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {            info.longVersionCode        } else info.versionCode.toLong()    }    private fun getExternalDirectory(directory: String?): String {        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {            var dir = directory            when (directory) {                Environment.DIRECTORY_AUDIOBOOKS -> dir = null                Environment.DIRECTORY_DCIM -> dir = null                Environment.DIRECTORY_DOCUMENTS -> dir = null                Environment.DIRECTORY_AUDIOBOOKS -> dir = null            }            context.getExternalFilesDir(dir)!!.toString()//            MediaStore.MediaColumns.DISPLAY_NAME        } else {            if (directory == null) {                Environment.getExternalStorageDirectory().toString()            } else {                Environment.getExternalStoragePublicDirectory(directory).toString()            }        }    }}